// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot Test for Math Magicians project Snapshot needs to be equal as component render 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div>
        <h2>
          Welcome to my Math Magicians website!
        </h2>
        <div>
          <p>
            I would not dare to say that there is a direct relation between mathematics and madness; but there is no doubt that great mathematicians suffer from maniacal characteristics, delirium and symptoms of schizophrenia.
          </p>
          <p>
            Why are numbers beautiful? It is like asking why is Beethoven’s Ninth Symphony beautiful If you don’t see why, someone can’t tell you. I know numbers are beautiful. If they aren’t beautiful, nothing is.
          </p>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div>
      <h2>
        Welcome to my Math Magicians website!
      </h2>
      <div>
        <p>
          I would not dare to say that there is a direct relation between mathematics and madness; but there is no doubt that great mathematicians suffer from maniacal characteristics, delirium and symptoms of schizophrenia.
        </p>
        <p>
          Why are numbers beautiful? It is like asking why is Beethoven’s Ninth Symphony beautiful If you don’t see why, someone can’t tell you. I know numbers are beautiful. If they aren’t beautiful, nothing is.
        </p>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Snapshot Test for Math Magicians project Snapshot needs to be equal as component render 2`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div>
        <h2>
          Mathematics is not about numbers, equations, compulations or algorithms. It is about understanding.
          <p>
            --Wiliam Paul Thurston
          </p>
        </h2>
      </div>
    </div>
  </body>,
  "container": <div>
    <div>
      <h2>
        Mathematics is not about numbers, equations, compulations or algorithms. It is about understanding.
        <p>
          --Wiliam Paul Thurston
        </p>
      </h2>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Snapshot Test for Math Magicians project Snapshot needs to be equal as component render 3`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="container"
      >
        <div
          class="wrapper"
        >
          <input
            class="screen"
            type="text"
            value="0"
          />
          <button
            class="btn light-gray"
            type="button"
          >
            AC
          </button>
          <button
            class="btn light-gray"
            type="button"
          >
            %
          </button>
          <button
            class="btn light-gray"
            type="button"
          >
            +/-
          </button>
          <button
            class="btn orange"
            type="button"
          >
            ÷
          </button>
          <button
            class="btn"
            type="button"
          >
            7
          </button>
          <button
            class="btn"
            type="button"
          >
            8
          </button>
          <button
            class="btn"
            type="button"
          >
            9
          </button>
          <button
            class="btn orange"
            type="button"
          >
            x
          </button>
          <button
            class="btn"
            type="button"
          >
            4
          </button>
          <button
            class="btn"
            type="button"
          >
            5
          </button>
          <button
            class="btn"
            type="button"
          >
            6
          </button>
          <button
            class="btn orange"
            type="button"
          >
            +
          </button>
          <button
            class="btn"
            type="button"
          >
            1
          </button>
          <button
            class="btn"
            type="button"
          >
            2
          </button>
          <button
            class="btn"
            type="button"
          >
            3
          </button>
          <button
            class="btn orange"
            type="button"
          >
            -
          </button>
          <button
            class="btn zero"
            type="button"
          >
            0
          </button>
          <button
            class="btn"
            type="button"
          >
            .
          </button>
          <button
            class="btn"
            type="button"
          >
            =
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="container"
    >
      <div
        class="wrapper"
      >
        <input
          class="screen"
          type="text"
          value="0"
        />
        <button
          class="btn light-gray"
          type="button"
        >
          AC
        </button>
        <button
          class="btn light-gray"
          type="button"
        >
          %
        </button>
        <button
          class="btn light-gray"
          type="button"
        >
          +/-
        </button>
        <button
          class="btn orange"
          type="button"
        >
          ÷
        </button>
        <button
          class="btn"
          type="button"
        >
          7
        </button>
        <button
          class="btn"
          type="button"
        >
          8
        </button>
        <button
          class="btn"
          type="button"
        >
          9
        </button>
        <button
          class="btn orange"
          type="button"
        >
          x
        </button>
        <button
          class="btn"
          type="button"
        >
          4
        </button>
        <button
          class="btn"
          type="button"
        >
          5
        </button>
        <button
          class="btn"
          type="button"
        >
          6
        </button>
        <button
          class="btn orange"
          type="button"
        >
          +
        </button>
        <button
          class="btn"
          type="button"
        >
          1
        </button>
        <button
          class="btn"
          type="button"
        >
          2
        </button>
        <button
          class="btn"
          type="button"
        >
          3
        </button>
        <button
          class="btn orange"
          type="button"
        >
          -
        </button>
        <button
          class="btn zero"
          type="button"
        >
          0
        </button>
        <button
          class="btn"
          type="button"
        >
          .
        </button>
        <button
          class="btn"
          type="button"
        >
          =
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
